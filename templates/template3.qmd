---
title: "Template for Dose Selection"
format: html
editor: visual
---

## Design

We consider a randomized phase III study.

-   Start with one placebo arm and two dose arms, with a 1:1:1 randomization ratio.
-   Planned trial duration is up to 40 months.
-   Randomize 50 patients per month for the first 6 months, then 65 patients per month until 800 patients are recruited.
-   Dropout rate is 5% at month 12 and 12% at month 24.
-   Two time-to-event endpoints `PFS` and `OS` and objective response (`OR`) rate.
    -   Medians of `PFS` in placebo, low and high dose arms are 8.3, 11.5 and 12.2 months, approximately a hazard ratio 0.72 and 0.68.
    -   Medians of `OS` in placebo, low and high dose arms are 14.5, 19.3 and 19.9 months, approximately a hazard ratio 0.75 and 0.73.
    -   `OR` rates in placebo, low and high dose arms are 0.05, 0.12, and 0.16.
    -   `OR` needs three weeks to generate a readout.
-   Dose selection is done when having `OR` readout of 200 patients in treated arms.
    -   Statistics of the Farrington-Manning test are computed (high vs. low). High dose is selected if the $z$ statistic is greater than 2. We don't claim success of a trial based on `ORR` thus no $\alpha$ is spent on it.
-   `PFS` and `OS` are both tested with one-sided `logrank` test, with the overall family-wise error rate controlled at $\alpha = 0.025$ under a graphical testing procedure.
    -   $\alpha$ is split between `PFS` (0.01) and `OS` (0.015).
-   A group sequential design is adopted on placebo and the selected arm.
    -   Interim analysis is performed for `PFS` only when 250 `PFS` events are observed.
    -   A non-binding futility analysis is performed on `PFS` with a boundary 0.5 of `logrank` statistics.
    -   Final analysis is performed for both endpoints when all planned patients are randomized and at least 450 `OS` events are observed. However, if the target number of `OS` events cannot be reached, the final analysis is performed at month 40.
    -   For `PFS`, Lan & DeMets $\alpha$-spending is used as an approximation to the Oâ€™Brien & Fleming boundaries.

## Implementation

### Loading relevant packages

```{r}
#| output: false
library(dplyr)
library(TrialSimulator)
library(kableExtra)
set.seed(12345)
```

### Helper functions

In this section, we define helper functions that are task-specific. For example, statistician may simulate correlated `PFS`, `OS` and `OR` in various ways. For the purpose of illustration, we simulate independent endpoints, i.e. `corr` is currently a dummy argument.

```{r}
#' Simulate correlated PFS and OS. Marginally, both endpoints follow exponential distribution. 
#' @param n integer. Number of samples. 
#' @param median_pfs numeric. Median of PFS in an arm. 
#' @param median_os numeric. Median of OS in an arm. 
#' @param orr numeric. Objective response rate in an arm. 
#' @param corr numeric. Parameter of correlation between PFS and OS. 
correlated_pfs_os <- function(n, median_pfs, median_os, orr, corr = .0){
  pfs <- rexp(n, rate = log(2) / median_pfs)
  os <- rexp(n, rate = log(2) / median_os)
  or <- rbinom(n, size = 1, prob = orr)
  
  data.frame(pfs = pfs, os = os, or, pfs_event = 1, os_event = 1)
}
```

### Define Endpoints and Arms

We define three endpoints in an arm together in the helper function. `readout` is specified for the endpoint `OR` as it is not a time-to-event endpoint.

::: panel-tabset
## Placebo

```{r}
pfs_and_os_in_pbo <- endpoint(name = c('pfs', 'os', 'or'), 
                              type = c('tte', 'tte', 'non-tte'), 
                              readout = c(or = 3/52 * 12), 
                              generator = correlated_pfs_os, 
                              median_pfs = 8.3, median_os = 14.5, orr = 0.05)
pbo <- arm(name = 'placebo')
pbo$add_endpoints(pfs_and_os_in_pbo)
```

## Low dose

```{r}
pfs_and_os_in_low <- endpoint(name = c('or', 'pfs', 'os'), 
                              type = c('non-tte', 'tte', 'tte'), 
                              readout = c(or = 3/52 * 12), 
                              generator = correlated_pfs_os, 
                              median_pfs = 11.5, median_os = 19.3, orr = 0.12)
low <- arm(name = 'low')
low$add_endpoints(pfs_and_os_in_low)
```

## High dose

```{r}
pfs_and_os_in_high <- endpoint(name = c('or', 'pfs', 'os'), 
                               type = c('non-tte', 'tte', 'tte'), 
                               readout = c(or = 3/52 * 12), 
                               generator = correlated_pfs_os, 
                               median_pfs = 12.2, median_os = 19.9, orr = 0.16)
high <- arm(name = 'high')
high$add_endpoints(pfs_and_os_in_high)
```
:::

### Define a trial

We use the Weibull distribution to model dropout. The `TrialSimulator` package provides a helper function to compute the shape and scale parameters of the Weibull distribution.

```{r}
weibullDropout(time = c(12, 24), dropout_rate = c(.05, .12))
```

To define arms and a trial, we can

```{r}
#| output: false
accrual_rate <- data.frame(end_time = c(6, Inf), 
                           piecewise_rate = c(50, 65))

trial <- trial(
  name = 'trial-123', n_patients = 800, duration = 50, 
  enroller = StaggeredRecruiter, accrual_rate = accrual_rate, 
  dropout = rweibull, shape = 1.32, scale = 114.4
)

trial$add_arms(sample_ratio = c(1, 1, 1), pbo, low, high)
```

### Define Trial Milestones and Actions

We conduct p-values of `PFS` and `OS` at interim and final analysis based on the `logrank` statistics and independent increment method. We could use the same approach to determine the $z$ statistic for futility analysis as well, however, for the sake of simplicity, we use the conventional $z$ statistic in this example.

::: panel-tabset
## Dose Selection

```{r}
action_at_dose_selection <- function(trial, milestone_name){
  
  locked_data <- trial$get_locked_data(milestone_name)
  
  #' codes below this line are customized to conduct statistical tests and save results
  
  fm <- fitFarringtonManning(endpoint = 'or', 
                             placebo = 'low', 
                             alternative = 'greater', 
                             data = locked_data, 
                             delta = 0, 
                             arm %in% c('high', 'low'))
  
  removed_arm <- ifelse(fm$z < 2, 'high', 'low')
  trial$save(value = removed_arm, name = 'removed_arm')
  trial$remove_arms(removed_arm)
  
}
```

## Interim

```{r}
action_at_interim <- function(trial, milestone_name){
  
  locked_data <- trial$get_locked_data(milestone_name)
  
  #' codes below this line are customized to conduct statistical tests and save results
  
  pfs <- fitLogrank(endpoint = 'pfs', placebo = 'placebo', 
                    data = locked_data, 
                    arm %in% trial$get_arms_name()) ## fit it on kept arms only
  
  #' futility based on conventional z statistics w/o independent increment
  trial$save(value = ifelse(pfs$z < .5, 'futile', 'efficacious'), name = 'futility')
  
}
```

## Final

```{r}
#' action at final analysis is very similar to the one at interim, 
#' except that a graphical test is performed
action_at_final <- function(trial, milestone_name){
  
  #' codes below this line are customized to conduct statistical tests and save results
  
  ## test PFS
  pinfo_pfs <- data.frame(placebo = c(40, 210, 330), low = c(40, 210, 330), high = c(40, 210, 330))
  rownames(pinfo_pfs) <- c('dose selection', 'interim analysis', 'final analysis')
  
  dt_pfs <- trial$dunnettTest(endpoint = 'pfs', placebo = 'placebo',
                              treatments = c('high', 'low'),
                              milestones = c('dose selection', 'interim analysis', 'final analysis'),
                              planned_info = pinfo_pfs)
  
  ct_pfs <- trial$closedTest(dt_pfs, treatments = c('high', 'low'),
                             milestones = c('interim analysis', 'final analysis'),
                             alpha = .01, alpha_spending = 'asOF')
  
  ## test OS
  pinfo_os <- data.frame(placebo = c(25, 425), low = c(25, 425), high = c(25, 425))
  rownames(pinfo_os) <- c('dose selection', 'final analysis')
  
  dt_os <- trial$dunnettTest(endpoint = 'os', placebo = 'placebo', 
                             treatments = c('high', 'low'), 
                             milestones = c('dose selection', 'final analysis'), 
                             planned_info = pinfo_os)
  
  ct_os <- trial$closedTest(dt_os, treatments = c('high', 'low'), 
                            milestones = c('final analysis'),
                            alpha = .015, alpha_spending = 'asOF')
  
  trial$save(value = ct_pfs$decision[ct_pfs$arm == 'high'], name = 'pfs_high_decision')
  trial$save(value = ct_pfs$decision[ct_pfs$arm == 'low'], name = 'pfs_low_decision')
  
  trial$save(value = ct_os$decision[ct_os$arm == 'high'], name = 'os_high_decision')
  trial$save(value = ct_os$decision[ct_os$arm == 'low'], name = 'os_low_decision')
  
  ct_os

}
  
```
:::

We plan three trial milestones for dose selection, interim and final analysis.

::: panel-tabset
## Dose selection

```{r}
dose_selection <- 
  milestone(name = 'dose selection', 
            trigger_condition = 
              eventNumber(endpoint = 'or', n = 200, arms = c('low', 'high')), 
            action = action_at_dose_selection)
```

## Interim

```{r}
interim <- milestone(name = 'interim analysis', 
                     trigger_condition = 
                       eventNumber(endpoint = 'pfs', n = 250), 
                     action = action_at_interim)
```

## Final

```{r}
final <- milestone(name = 'final analysis', 
                   trigger_condition = (
                     eventNumber(endpoint = 'os', n = 450)
                     ) | calendarTime(time = 50), 
                   action = action_at_final)
```
:::

We then register the three trial milestones to a listener who will monitor the trial.

```{r}
#| output: false
listener <- listener()
#' register trial milestones with the listener
listener$add_milestones(dose_selection, interim, final)
```

### Execute a Trial

To execute a trial, we call the member function `run` in the controller of the trial and listener. Here we simulate one trial, so that a plot of cumulative events are generated automatically for each of the endpoints. We can set `n` to a larger integer for more replicates.

```{r}
controller <- controller(trial, listener)
controller$run(n = 1, plot_event = TRUE)
```

### Extract the Output

We can display information saved for each of the simulated trials by the member function `get_output`.

```{r}
controller$get_output() %>% 
  kable(escape = TRUE) %>% 
  kable_styling(bootstrap_options = "striped", 
                full_width = FALSE,
                position = "left") %>%
  scroll_box(width = "100%")
```
